{
	"info": {
		"_postman_id": "f6a569dc-5148-4eba-aa21-aca453251139",
		"name": "restful_booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39612868"
	},
	"item": [
		{
			"name": "POST",
			"item": [
				{
					"name": "POST Create new booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Contains bookingid\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('bookingid');\r",
									"});\r",
									"\r",
									"pm.test(\"Booking created\", function () {\r",
									"    const expectedResponseBody = pm.environment.get(\"expectedResponseBody\");\r",
									"    const expectedData = JSON.parse(expectedResponseBody);\r",
									"    const booking = pm.response.json().booking;\r",
									"\r",
									"    pm.expect(booking.firstname).to.eql(expectedData.firstname);\r",
									"    pm.expect(booking.lastname).to.eql(expectedData.lastname);\r",
									"    pm.expect(booking.totalprice).to.eql(expectedData.totalprice);\r",
									"    pm.expect(booking.depositpaid).to.eql(expectedData.depositpaid);\r",
									"    pm.expect(booking.bookingdates).to.eql(expectedData.bookingdates);\r",
									"    pm.expect(booking.additionalneeds).to.eql(expectedData.additionalneeds);\r",
									"});\r",
									"\r",
									"let bookingId = pm.response.json().bookingid;\r",
									"pm.environment.set(\"bookingId\", bookingId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"firstname\" : \"Jim\",    \r\n\"lastname\" : \"Brown\",    \r\n\"totalprice\" : 111,    \r\n\"depositpaid\" : true,    \r\n\"bookingdates\" : {        \r\n    \"checkin\" : \"2024-02-12\",        \r\n    \"checkout\" : \"2025-03-03\"    \r\n},  \r\n\"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}booking",
							"host": [
								"{{base_url}}booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Negative create new booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response comtains an error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql('Bad Request');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : ,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2024-02-12\",\r\n        \"checkout\" : \"2025-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}booking",
							"host": [
								"{{base_url}}booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response comtains token\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('token');\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"let token = responseData.token;\r",
									"    pm.environment.set(\"token\", token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}auth",
							"host": [
								"{{base_url}}auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Negative authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response comtains an error message\", function (){\r",
									"    pm.expect(pm.response.json().reason).to.eql('Bad credentials');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"Antonio\",\r\n    \"password\" : \"cucumber\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}auth",
							"host": [
								"{{base_url}}auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Change",
			"item": [
				{
					"name": "PUT All changes into booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bookingId = pm.environment.get(\"bookingId\");\r",
									"console.log(\"Booking ID: \", bookingId);\r",
									"pm.sendRequest({\r",
									"    url: `https://restful-booker.herokuapp.com/booking/${bookingId}`,\r",
									"    method: 'GET'\r",
									"}, function (err, res) {\r",
									"    if (res) {\r",
									"        pm.test(\"Статус ответа на запрос на получение неизменённых данных равен 200\", function () {\r",
									"            pm.expect(res).to.have.status(200);\r",
									"        });\r",
									"\r",
									"        const currentBooking = res.json();\r",
									"\r",
									"        pm.environment.set(\"currentBooking\", JSON.stringify(currentBooking));\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа на put запрос 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Данные полностью обновились\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const previosBooking = JSON.parse(pm.environment.get(\"currentBooking\"));\r",
									"    pm.expect(jsonData.firstname).to.not.eql(previosBooking.firstname);\r",
									"    pm.expect(jsonData.lastname).to.not.eql(previosBooking.lastname);\r",
									"    pm.expect(jsonData.totalprice).to.not.eql(previosBooking.totalprice);\r",
									"    pm.expect(jsonData.depositpaid).to.not.eql(previosBooking.depositpaid);\r",
									"    pm.expect(jsonData.bookingdates).to.not.eql(previosBooking.bookingdates);\r",
									"    pm.expect(jsonData.additionalneeds).to.not.eql(previosBooking.additionalneeds);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jack\",\r\n    \"lastname\" : \"Kerry\",\r\n    \"totalprice\" : 11000,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2024-03-12\",\r\n        \"checkout\" : \"2025-02-01\"\r\n    },\r\n    \"additionalneeds\" : \"Dinner\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}booking/{{bookingId}}",
							"host": [
								"{{base_url}}booking"
							],
							"path": [
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Single change into booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bookingId = pm.environment.get(\"bookingId\");\r",
									"console.log(\"Booking ID: \", bookingId);\r",
									"pm.sendRequest({\r",
									"    url: `https://restful-booker.herokuapp.com/booking/${bookingId}`,\r",
									"    method: 'GET'\r",
									"}, function (err, res) {\r",
									"    if (res) {\r",
									"        pm.test(\"Статус ответа на GET-запрос на получение изначальных данных равен 200\", function () {\r",
									"            pm.expect(res).to.have.status(200);\r",
									"        });\r",
									"\r",
									"        const currentData = res.json();\r",
									"\r",
									"        pm.environment.set(\"currentName\", currentData.firstname);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа на patch запрос 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Частичное обновление прошло успешно\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const previosName = pm.environment.get(\"currentName\");\r",
									"    pm.expect(jsonData.firstname).to.not.eql(previosName);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}booking/{{bookingId}}",
							"host": [
								"{{base_url}}booking"
							],
							"path": [
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Negative change into booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bookingId = pm.environment.get(\"bookingId\");\r",
									"console.log(\"Booking ID: \", bookingId);\r",
									"pm.sendRequest({\r",
									"    url: `https://restful-booker.herokuapp.com/booking/${bookingId}`,\r",
									"    method: 'GET'\r",
									"}, function (err, res) {\r",
									"    if (res) {\r",
									"        pm.test(\"Статус ответа на запрос на получение неизменённых данных равен 200\", function () {\r",
									"            pm.expect(res).to.have.status(200);\r",
									"        });\r",
									"\r",
									"        const currentBooking = res.json();\r",
									"\r",
									"        pm.environment.set(\"currentBooking\", JSON.stringify(currentBooking));\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа на put запрос 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Данные не обновились\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const previosBooking = JSON.parse(pm.environment.get(\"currentBooking\"));\r",
									"    pm.expect(jsonData.firstname).to.eql(previosBooking.firstname);\r",
									"    pm.expect(jsonData.lastname).to.eql(previosBooking.lastname);\r",
									"    pm.expect(jsonData.totalprice).to.eql(previosBooking.totalprice);\r",
									"    pm.expect(jsonData.depositpaid).to.eql(previosBooking.depositpaid);\r",
									"    pm.expect(jsonData.bookingdates).to.eql(previosBooking.bookingdates);\r",
									"    pm.expect(jsonData.additionalneeds).to.eql(previosBooking.additionalneeds);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Kerry\",\r\n    \"totalprice\" : 11000,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2024-03-12\",\r\n        \"checkout\" : \"2025-02-01\"\r\n    },\r\n    \"additionalneeds\" : \"Dinner\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}booking/{{bookingId}}",
							"host": [
								"{{base_url}}booking"
							],
							"path": [
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "GET all bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Содержит список бронирований\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}booking",
							"host": [
								"{{base_url}}booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Содержит тело ответа\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}booking/{{bookingId}}",
							"host": [
								"{{base_url}}booking"
							],
							"path": [
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Negative one booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа равен 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит сообщение об ошибке\", function () {\r",
									"    const jsonData = pm.response.text();\r",
									"    pm.expect(jsonData).to.eql('Not Found');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}booking/10000000000000",
							"host": [
								"{{base_url}}booking"
							],
							"path": [
								"10000000000000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "DELETE Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: `https://restful-booker.herokuapp.com/booking`,\r",
									"    method: 'POST',\r",
									"    body:{\r",
									"        \"firstname\" : \"Jim\",\r",
									"        \"lastname\" : \"Brown\",\r",
									"        \"totalprice\" : 111,\r",
									"        \"depositpaid\" : true,\r",
									"        \"bookingdates\" : {\r",
									"            \"checkin\" : \"2018-01-01\",\r",
									"            \"checkout\" : \"2019-01-01\"\r",
									"        },\r",
									"        \"additionalneeds\" : \"Breakfast\"\r",
									"    }\r",
									"    },\r",
									"\r",
									"    function (err, res) {\r",
									"\r",
									"        if ( res){\r",
									"            const responseJson = pm.response.json();\r",
									"            const bookingId = responseJson.bookingid;\r",
									"            pm.environment.set('bookingId', bookingId);\r",
									"        }\r",
									"        console.log(\"yraaaa222\", pm.request.body);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const bookingId = pm.environment.get(\"bookingId\");\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `https://restful-booker.herokuapp.com/booking/${bookingId}`,\r",
									"    method: 'GET'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Запись удалена\", function () {\r",
									"        pm.expect(res).to.have.property('code', 404);\r",
									"        pm.expect(res.text()).to.eql(\"Not Found\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}booking/{{bookingId}}",
							"host": [
								"{{base_url}}booking"
							],
							"path": [
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Negative delete booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа равен 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит сообщение об ошибке\", function () {\r",
									"    const jsonData = pm.response.text();\r",
									"    pm.expect(jsonData).to.eql('Method Not Allowed');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}booking/123456789123456789",
							"host": [
								"{{base_url}}booking"
							],
							"path": [
								"123456789123456789"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}